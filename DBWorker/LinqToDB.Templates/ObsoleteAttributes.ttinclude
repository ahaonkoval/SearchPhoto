<#
	{
		var beforeGenerateLinqToDBModel = BeforeGenerateLinqToDBModel;
		var afterGenerateLinqToDBModel  = AfterGenerateLinqToDBModel;

		var obsoleteAttr   = new Attribute("Obsolete");
		var obsoleteTables = new List<Tuple<string, string>>();

		BeforeGenerateLinqToDBModel = () =>
		{
			beforeGenerateLinqToDBModel();

			foreach (var table in Tables.Values)
			{
				if (table.Description.Contains("[Obsolete]"))
				{
					obsoleteTables.Add(Tuple.Create(table.Schema, table.Name));
					table.Attributes.Add(obsoleteAttr);
					table.Description = table.Description.Replace("[Obsolete]", "").Trim();
				}

				foreach (var c in table.Columns.Values)
				{
					if (c.Description.Contains("[Obsolete]"))
					{
						c.Attributes.Add(obsoleteAttr);
						c.Description = c.Description.Replace("[Obsolete]", "").Trim();
					}
				}
			}
		};

		AfterGenerateLinqToDBModel = () =>
		{
			foreach (var tableInfo in obsoleteTables)
			{
				string schema = tableInfo.Item1;
				string name   = tableInfo.Item2;

				foreach (var cm in GetTreeNodes(Model)
					.OfType<MemberBase>()
					.Where(t => t.Type != null)
					.Where(t => t.Type == name || t.Type.Contains("<" + name + ">")))
				{
					// check schema
					
					if (cm.Parent != null && cm.Parent.Parent != null)
					{
						var parent = cm.Parent.Parent;

						if (parent is Table)
						{
							var table = (Table)parent;

							if (schema == table.Schema)
								cm.Attributes.Add(obsoleteAttr);
						}
						else if (parent is Class)
						{
							var cls = (Class)parent;

							bool parentClassIncludesSchemaName = cls.Name.Equals(schema + "Schema", StringComparison.InvariantCultureIgnoreCase);
							bool classIsForDefaultSchema       = cls.Name == DataContextName;
							bool isExtensionMethod             = cls.Parent is Namespace || cls.Name == "TableExtensions";

							if (classIsForDefaultSchema || parentClassIncludesSchemaName || isExtensionMethod)
								cm.Attributes.Add(obsoleteAttr);
						}
					}
				}
			}
			
			afterGenerateLinqToDBModel();
		};
	}
#>
